{
  "version": 3,
  "sources": ["../../../app/routes/join.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\routes\\\\join.tsx\"\n);\nimport.meta.hot.lastModified = \"1690031968470.519\";\n}\n// REMIX HMR END\n\nimport Card from '~/componets/card'\r\nimport {Typography,Input,Button} from \"@material-tailwind/react\";\r\nimport { Form , useNavigation, useActionData,useLoaderData} from \"@remix-run/react\";\r\nimport { ActionFunction , json} from '@remix-run/node';\r\nimport { validateEmail,validatePassword,validateName} from '~/utils/validator.server';\r\nimport { Action } from '@remix-run/router';\r\nimport { register } from '~/utils/auth.server';\r\n\r\nexport default function join() {\r\n\r\n    // const errors = useLoaderData()\r\n\r\n  return (\r\n    <div className='absolute flex justify-center place-items-center  h-full w-full'>\r\n        <Card>\r\n            <Typography variant=\"h4\" className='text-gray-900'>Create and account</Typography>\r\n            <Typography className='text-gray-900 font-normal'>fill in the details to sign-up</Typography>\r\n            <Form method='post'>\r\n                {/* <span>{errors.error}</span> */}\r\n                <div className='m-4 flex flex-col gap-4'>\r\n                    <Input label=\"full name\" name=\"fullName\" required></Input>\r\n                    <Input label=\"email\" name=\"email\" required></Input>\r\n                    <Input type=\"password\" label=\"password\" name=\"password\" required></Input>\r\n                    <input type=\"hidden\" name=\"__action\" value=\"register\" />\r\n                    <Button type=\"submit\">login</Button>\r\n                    <Typography>\r\n                        Already have an account ? <a href=\"/login\" className='text-blue-400'>Login</a>\r\n                    </Typography>\r\n                </div>\r\n            </Form>\r\n        </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const action: ActionFunction = async ({request})=>\r\n{\r\n    const form = await request.formData()\r\n    const email = form.get('email')\r\n    const password = form.get('password')\r\n    let fullName = form.get(\"fullName\")\r\n    const action = \"register\"\r\n\r\n    if(typeof email !== \"string\" || typeof password !== 'string')\r\n    {\r\n        return json(\r\n            {\r\n                error:\"invalid form data\",\r\n                form:action\r\n            },\r\n            {\r\n                status:400\r\n            }\r\n        )\r\n    }\r\n\r\n    const errors = \r\n    {\r\n        email:validateEmail(email),\r\n        password:validatePassword(password),\r\n    }\r\n\r\n    if(Object.values(errors).some(Boolean))\r\n    {\r\n        return json({\r\n            errors,fields:\r\n            {\r\n                email,\r\n                password\r\n            }\r\n        })\r\n    }\r\n\r\n    switch(action)\r\n    {\r\n        case'register':\r\n        {\r\n            fullName = fullName as string\r\n\r\n            return await register({email,password,fullName})\r\n        }\r\n        default:\r\n            return json({error:'invalid form data'},{status:400})\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,mBAAsC;AAEtC,kBAAqC;AACrC,uBAA2D;AAE3D,kBAAyB;AASb;AAxBZ,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAWe,SAAR,OAAwB;AAI7B,SACE,mDAAC,SAAI,WAAU,kEACX,6DAAC,gBACG;AAAA,uDAAC,2BAAW,SAAQ,MAAK,WAAU,iBAAgB,kCAAnD;AAAA;AAAA;AAAA;AAAA,WAAqE;AAAA,IACrE,mDAAC,2BAAW,WAAU,6BAA4B,8CAAlD;AAAA;AAAA;AAAA;AAAA,WAAgF;AAAA,IAChF,mDAAC,QAAK,QAAO,QAET,6DAAC,SAAI,WAAU,2BACX;AAAA,yDAAC,sBAAM,OAAM,aAAY,MAAK,YAAW,UAAQ,QAAjD;AAAA;AAAA;AAAA;AAAA,aAAkD;AAAA,MAClD,mDAAC,sBAAM,OAAM,SAAQ,MAAK,SAAQ,UAAQ,QAA1C;AAAA;AAAA;AAAA;AAAA,aAA2C;AAAA,MAC3C,mDAAC,sBAAM,MAAK,YAAW,OAAM,YAAW,MAAK,YAAW,UAAQ,QAAhE;AAAA;AAAA;AAAA;AAAA,aAAiE;AAAA,MACjE,mDAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAM,cAA3C;AAAA;AAAA;AAAA;AAAA,aAAsD;AAAA,MACtD,mDAAC,uBAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,MAC3B,mDAAC,2BAAW;AAAA;AAAA,QACkB,mDAAC,OAAE,MAAK,UAAS,WAAU,iBAAgB,qBAA3C;AAAA;AAAA;AAAA;AAAA,eAAgD;AAAA,WAD9E;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SARJ;AAAA;AAAA;AAAA;AAAA,WASA,KAXJ;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,OAfJ;AAAA;AAAA;AAAA;AAAA,SAgBA,KAjBJ;AAAA;AAAA;AAAA;AAAA,SAkBA;AAEJ;",
  "names": []
}
