{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\login.tsx\");\n  import.meta.hot.lastModified = \"1690028712522.8423\";\n}\n// REMIX HMR END\n\nimport Card from '~/componets/card';\nimport { Typography, Input, Button } from \"@material-tailwind/react\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { json, redirect } from '@remix-run/node';\nimport { login, getUser } from '~/utils/auth.server';\nimport { useRef } from 'react';\nimport { validateEmail, validatePassword } from '~/utils/validator.server';\nexport const loader = async ({\n  request\n}) => {\n  return (await getUser(request)) ? redirect('/') : null;\n};\nexport default function Signin() {\n  _s();\n  const actionData = useActionData();\n  const firstLoad = useRef(true);\n  // const [errors, setErrors] = useState(actionData?.errors || {})\n  // const errors = useLoaderData()\n\n  return <div className='absolute flex justify-center place-items-center  h-full w-full'>\r\n        <Card>\r\n            <Typography variant=\"h4\" className='text-gray-900'>Log in</Typography>\r\n            <Typography className='text-gray-900 font-normal'>fill in the details to login</Typography>\r\n            <Form method=\"post\">\r\n                <div className='m-4 flex flex-col gap-4'>\r\n                    {/* <span>{errors.error}</span> */}\r\n                    <Input label=\"email\" name=\"email\"></Input>\r\n                    <Input type=\"password\" label=\"password\" name=\"password\"></Input>\r\n                    <input type=\"hidden\" name=\"__action\" value=\"register\" />\r\n                    <Button type=\"submit\">login</Button>\r\n                    <Typography>\r\n                        Dont have and account ? <a href=\"/join\" className='text-blue-400'>Create account</a>\r\n                    </Typography>\r\n                </div>\r\n            </Form>\r\n        </Card>\r\n    </div>;\n}\n_s(Signin, \"d943+0AEIZwLOrq2JoNNlWIU5Y0=\", false, function () {\n  return [useActionData];\n});\n_c = Signin;\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const action = \"login\";\n  const email = form.get('email');\n  const password = form.get('password');\n  if (typeof email !== \"string\" || typeof password !== 'string') {\n    return json({\n      error: \"invalid form data\",\n      form: action\n    }, {\n      status: 400\n    });\n  }\n  const errors = {\n    email: validateEmail(email),\n    password: validatePassword(password)\n  };\n  if (Object.values(errors).some(Boolean)) {\n    return json({\n      errors,\n      fields: {\n        email,\n        password\n      },\n      form: action\n    });\n  }\n  switch (action) {\n    case 'login':\n      {\n        return await login({\n          email,\n          password\n        });\n      }\n    default:\n      console.log(\"invalid login\");\n      return json({\n        error: 'invalid form data'\n      }, {\n        status: 400\n      });\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Signin\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAA0C;AAE1C,kBAA+B;AAC/B,kBAA+B;AAC/B,IAAAA,gBAAuB;AACvB,uBAAgD;AAepC;AAzCZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iCAAmC,EAAE;AAAA,EAC9E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwB;AACxB,cAAY,IAAI,eAAe;AACjC;AAee,SAAR,SAA0B;AAC/B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,gBAAY,sBAAO,IAAI;AAI7B,SAAO,mDAAC,SAAI,WAAU,kEAChB,6DAAC,gBACG;AAAA,uDAAC,2BAAW,SAAQ,MAAK,WAAU,iBAAgB,sBAAnD;AAAA;AAAA;AAAA;AAAA,WAAyD;AAAA,IACzD,mDAAC,2BAAW,WAAU,6BAA4B,4CAAlD;AAAA;AAAA;AAAA;AAAA,WAA8E;AAAA,IAC9E,mDAAC,QAAK,QAAO,QACT,6DAAC,SAAI,WAAU,2BAEX;AAAA,yDAAC,sBAAM,OAAM,SAAQ,MAAK,WAA1B;AAAA;AAAA;AAAA;AAAA,aAAkC;AAAA,MAClC,mDAAC,sBAAM,MAAK,YAAW,OAAM,YAAW,MAAK,cAA7C;AAAA;AAAA;AAAA;AAAA,aAAwD;AAAA,MACxD,mDAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAM,cAA3C;AAAA;AAAA;AAAA;AAAA,aAAsD;AAAA,MACtD,mDAAC,uBAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,MAC3B,mDAAC,2BAAW;AAAA;AAAA,QACgB,mDAAC,OAAE,MAAK,SAAQ,WAAU,iBAAgB,8BAA1C;AAAA;AAAA;AAAA;AAAA,eAAwD;AAAA,WADpF;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SARJ;AAAA;AAAA;AAAA;AAAA,WASA,KAVJ;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,OAdJ;AAAA;AAAA;AAAA;AAAA,SAeA,KAhBC;AAAA;AAAA;AAAA;AAAA,SAiBL;AACJ;AACA,GAAG,QAAQ,gCAAgC,OAAO,WAAY;AAC5D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA+CL,IAAI;AACJ,aAAa,IAAI,QAAQ;AAEzB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
